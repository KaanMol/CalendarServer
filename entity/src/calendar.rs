//! `SeaORM` Entity. Generated by sea-orm-codegen 0.10.5

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "calendar")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: String,
    pub user: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::calendar_event_modifier::Entity")]
    CalendarEventModifier,
    #[sea_orm(has_many = "super::calendar_filter::Entity")]
    CalendarFilter,
    #[sea_orm(has_many = "super::ical::Entity")]
    Ical,
    #[sea_orm(
        belongs_to = "super::user::Entity",
        from = "Column::User",
        to = "super::user::Column::Id",
        on_update = "NoAction",
        on_delete = "NoAction"
    )]
    User,
}

impl Related<super::calendar_event_modifier::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CalendarEventModifier.def()
    }
}

impl Related<super::calendar_filter::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::CalendarFilter.def()
    }
}

impl Related<super::ical::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Ical.def()
    }
}

impl Related<super::user::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::User.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
